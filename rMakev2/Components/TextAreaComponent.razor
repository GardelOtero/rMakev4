@using Blazorise.RichTextEdit
@using rMakev2.ViewModel
@inject RmakeViewModel vm;
@inject IJSRuntime jsr;


<RichTextEdit @ref="richTextEditRef"
              Theme="RichTextEditTheme.Bubble"
              
              PlaceHolder="Start writting"
              id="@AreaOrderId"
              ReadOnly="@readOnly"
              SubmitOnEnter="false"
              @onkeydown="KeyPress"
              ToolbarPosition="Blazorise.Placement.Top">
    <Editor>
     
        @((MarkupString)BindingValue)

    </Editor>
    <Toolbar>
        <RichTextEditToolbarGroup>
            <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Strike" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
            <RichTextEditToolbarButton Action="RichTextEditAction.CodeBlock" />
            <RichTextEditToolbarSelect Action="RichTextEditAction.Align">
                <RichTextEditToolbarSelectItem Value="center" />
                <RichTextEditToolbarSelectItem Value="right" />
                <RichTextEditToolbarSelectItem Value="justify" />
                <RichTextEditToolbarSelectItem Selected />
            </RichTextEditToolbarSelect>

            <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                <RichTextEditToolbarSelectItem Value="small" />
                <RichTextEditToolbarSelectItem Selected />
                <RichTextEditToolbarSelectItem Value="large" />
                <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
            </RichTextEditToolbarSelect>
            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
        </RichTextEditToolbarGroup>
        <!-- Custom toolbar content -->
        <RichTextEditToolbarGroup Float="Blazorise.Float.End">
        </RichTextEditToolbarGroup>
    </Toolbar>
</RichTextEdit>

@code {

    private List<string> Keys { get; set; } = new List<string>();
    public async Task KeyPress(KeyboardEventArgs e)
    {
        var test = vm.App.Ui.SelectedDocument.Elements.FirstOrDefault(x => x.Id == ElementId).Content = await richTextEditRef.GetHtmlAsync();
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            vm.Ui.BlockRTAFocus = false;


            if (Keys.Any())
            {
                string last = Keys.Last();
                if (last == "Enter")
                {
                    vm.NewElement();
                    Keys.Clear();
                }
            }
            else
            {
                Keys.Add("Enter");

            }
            Save();
        }
        else
        {
            vm.Ui.BlockRTAFocus = true;
            Keys.Clear();
            Save();
        }

    }


    protected RichTextEdit? richTextEditRef;
    protected bool readOnly = false;
    protected string? contentAsHtml;
    protected string AreaOrderId;

    [Parameter]
    public string BindingValue {get;set;}


    private int orderId;

    [Parameter]
    public int OrderId
    {
        get => orderId;
        set
        {
            if (orderId == value) return;

            orderId = value;
            AreaOrderId = "Area" + value.ToString();

        }
    }

    public void Save(){
        vm.App.Ui.SelectedDocument.Elements.FirstOrDefault(x => x.Id == ElementId).Content = BindingValue;
    }

    [Parameter]
    public string ElementId{ get; set; }



    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {


        }

        if (vm.Ui.BlockRTAFocus == false)
        {
            string elementId = vm.Ui.SelectedDocument.Elements.OrderBy(w => w.Order).Last().Order.ToString();
            jsr.InvokeVoidAsync("focusLastTextEditor", elementId);
            vm.Ui.BlockRTAFocus = false;
            
        }
        
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

//Le quité el two way binding, para hacerlo de una sola via y que en el on keyPres actualice el VIewModel y ya.
}

        