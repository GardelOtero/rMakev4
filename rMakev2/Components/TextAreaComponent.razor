@using Blazorise.RichTextEdit
@using rMakev2.ViewModel
@inject RmakeViewModel vm;
@inject IJSRuntime jsr;

<RichTextEdit @ref="richTextEditRef"
              Theme="RichTextEditTheme.Bubble"
              ContentChanged="@OnContentChanged"
              PlaceHolder="Start writting"
              id="@AreaOrderId"
              ReadOnly="@readOnly"
              SubmitOnEnter="false"
              @onkeydown="KeyPress"
              ToolbarPosition="Blazorise.Placement.Top">
    <Editor>
        @BindingValue
        @vm.Ui.BlockRTAFocus
    </Editor>
    <Toolbar>
        <RichTextEditToolbarGroup>
            <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Strike" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
            <RichTextEditToolbarButton Action="RichTextEditAction.CodeBlock" />
            <RichTextEditToolbarSelect Action="RichTextEditAction.Align">
                <RichTextEditToolbarSelectItem Value="center" />
                <RichTextEditToolbarSelectItem Value="right" />
                <RichTextEditToolbarSelectItem Value="justify" />
                <RichTextEditToolbarSelectItem Selected />
            </RichTextEditToolbarSelect>

            <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                <RichTextEditToolbarSelectItem Value="small" />
                <RichTextEditToolbarSelectItem Selected />
                <RichTextEditToolbarSelectItem Value="large" />
                <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
            </RichTextEditToolbarSelect>
            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
        </RichTextEditToolbarGroup>
        <!-- Custom toolbar content -->
        <RichTextEditToolbarGroup Float="Blazorise.Float.End">
        </RichTextEditToolbarGroup>
    </Toolbar>
</RichTextEdit>

@code {

    private List<string> Keys { get; set; } = new List<string>();
    public void KeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (Keys.Any())
            {
                string last = Keys.Last();
                if (last == "Enter")
                {

                    vm.NewElement();
                    
                    Keys.Clear();

                }

            }
            else
            {
                Keys.Add("Enter");

            }

        }
        else
        {
            Keys.Clear();
        }

    }


    protected RichTextEdit? richTextEditRef;
    protected bool readOnly = false;
    protected string? contentAsHtml;
    protected string AreaOrderId;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        _value = contentAsHtml;
        await BindingValueChanged.InvokeAsync(contentAsHtml);
    }


    private string _value;
    [Parameter]
    public string BindingValue
    {
        get => _value;
        set
        {
            if (_value == value) return;

            _value = value;
            if (richTextEditRef != null)
                richTextEditRef.SetHtmlAsync(_value);
        }
    }



    private int orderId;
    [Parameter]
    public int OrderId
    {
        get => orderId;
        set
        {
            if (orderId == value) return;

            orderId = value;
            AreaOrderId = "Area" + value.ToString();

        }
    }

    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {


        }

        if (vm.Ui.BlockRTAFocus == false)
        {
            string elementId = vm.Ui.SelectedDocument.Elements.OrderBy(w => w.Order).Last().Order.ToString();
            jsr.InvokeVoidAsync("focusLastTextEditor", elementId);
            vm.Ui.BlockRTAFocus = false;
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}
