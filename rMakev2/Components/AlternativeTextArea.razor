@using Blazorise.RichTextEdit
@using rMakev2.ViewModel
@inject RmakeViewModel vm;
@inject IJSRuntime jsr;

<RichTextEdit @ref="richTextEditRef"
              Theme="RichTextEditTheme.Snow"              
              PlaceHolder="Start writting"
           
              SubmitOnEnter="false"
        
              ToolbarPosition="Blazorise.Placement.Top">
    <Editor>
        @((MarkupString)BindingValue)

    </Editor>
    <Toolbar>
        <RichTextEditToolbarGroup>
            <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Strike" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />
            <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
            <RichTextEditToolbarButton Action="RichTextEditAction.CodeBlock" />
            <RichTextEditToolbarSelect Action="RichTextEditAction.Align">
                <RichTextEditToolbarSelectItem Value="center" />
                <RichTextEditToolbarSelectItem Value="right" />
                <RichTextEditToolbarSelectItem Value="justify" />
                <RichTextEditToolbarSelectItem Selected />
            </RichTextEditToolbarSelect>

            <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                <RichTextEditToolbarSelectItem Value="small" />
                <RichTextEditToolbarSelectItem Selected />
                <RichTextEditToolbarSelectItem Value="large" />
                <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
            </RichTextEditToolbarSelect>
            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
            <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
        </RichTextEditToolbarGroup>
        <!-- Custom toolbar content -->
        <RichTextEditToolbarGroup Float="Blazorise.Float.End">
        </RichTextEditToolbarGroup>
    </Toolbar>
</RichTextEdit>

@code {
    private string TextAreaValue;
    protected override async Task OnInitializedAsync()
    {
        TextAreaValue = BindingValue;
        

    }

   
    protected RichTextEdit? richTextEditRef;

 




   
    [Parameter]
    public string BindingValue {get; set;} 

    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }

    

    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
        
        return base.OnAfterRenderAsync(firstRender);
    }


}
