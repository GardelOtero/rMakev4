@page "/projects"
@page "/projects/{token}"
@using System.ComponentModel.DataAnnotations;
@using rMakev2.ViewModel;
@using rMakev2.Components;
@using rMakev2.Services;
@using rMakev2.Models;
@inject RmakeViewModel vm;
@inject ProjectViewModel PVm;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .projectList {
        display: flex;
        flex-direction: row;
        height: 80%;
        flex-wrap: wrap;
        padding: 5px;
        width: 100%;
    }

    .projectContainer {
        border-radius: 5px;
        padding: 5px;
        margin: 10px;
        width: 200px;
        height: 200px;
        background-color: rgba(0,0,0,.125);
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .createContainer {
        border-radius: 5px;
        padding: 5px;
        margin: 10px;
        width: 200px;
        height: 200px;
        background-color: rgba(0,0,0,.125);
        display: flex;
        justify-content: center;
    }

    .createButton {
        padding: 5px;
        height: 50%;
        width: 50%;
        align-self: center;
    }

    .projectInput {
        height: 2rem;
        width: 90%;
        margin: 5px;
        margin-bottom: 5px;
        padding: 2px;
        background-color: rgba(0,0,0,0);
    }

        .projectInput:focus {
            background-color: white;
            border-radius: 5px;
        }

    .mainContainer {
        height: 80%;
        width: 100%;
        padding: 10px;
    }

    .logo {
        font-size: 30px;
        margin: 0;
        font-weight: 700;
        margin-left: 0;
    }

    .loadButton {
        width: 95%;
        height: 75%;
        margin: 5px;
        background-color: white;
        border-radius: 5px;
    }

    .projectTitle {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 95%;
        padding: 5px;
    }

</style>

<div class="mainContainer">
    <div>
        <div class="logo"><img src="svgs/rMake icon.svg" title="rMake" /></div>
    </div>


    <div class="projectList">

        <button class="createContainer" @onclick="PVm.NewProject" title="Create Project">

            <img src="/svgs/Plus.svg"  class="createButton"/>
        </button>
        @foreach (var project in PVm.Portfolio.Projects)
        {
            <div class="projectContainer">



                <div class="projectTitle">

                    <input @bind="@project.Name" @bind:event="oninput" class="projectInput" @onchange="@PVm.OnPropertyChanged"></input>
                    <button @onclick="() => PVm.DeleteProject(project)"><img src="/svgs/Delete.svg"/></button>

                </div>
                <button @onclick="() => PVm.LoadDocuments(project)" class="loadButton">

                </button>


                @*<button @onclick="() => PVm.DeleteProject(project)" class="createButton">Delete</button>
                <button @onclick="() => PVm.LoadDocuments(project)" class="createButton">Load</button>*@
            </div>
        }

    </div>



</div>

@code {
    [Parameter]
    public string token { get; set; }



    protected override async Task OnInitializedAsync()
    {

        try
        {

        }
        catch
        {

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await loadStorage();

        }

    }

    public async Task loadStorage()
    {
 

        if (await localStorage.ContainKeyAsync("portfolio") == false)
            return;

        Portfolio storagePortfolio = new Portfolio();

        storagePortfolio = await localStorage.GetItemAsync<Portfolio>("portfolio");

        storagePortfolio.App = vm.App;
        storagePortfolio.AppId = vm.App.Id;

        PVm.Portfolio = storagePortfolio;

        foreach(var proj in PVm.Portfolio.Projects)
        {
            proj.Portfolio = PVm.Portfolio;
        }

        StateHasChanged();


    }



}
