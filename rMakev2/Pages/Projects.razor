@page "/projects"
@page "/projects/{token}"
@using System.ComponentModel.DataAnnotations;
@using rMakev2.ViewModel;
@using rMakev2.Components;
@using rMakev2.Services;
@using rMakev2.Models;
@using rMakev2.DTOs;
@inject RmakeViewModel vm;
@inject ProjectViewModel PVm;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .projectList {
        display: flex;
        flex-direction: row;
        height: 80%;
        flex-wrap: wrap;
        padding: 5px;
        width: 100%;
        margin-top: 5%;
    }

    .projectContainer {
        border-radius: 5px;
        padding: 5px;
        margin: 10px;
        width: 200px;
        height: 200px;
        background-color: rgba(0,0,0,.125);
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .createContainer {
        border-radius: 5px;
        padding: 5px;
        margin: 10px;
        width: 200px;
        height: 200px;
        background-color: rgba(0,0,0,.125);
        display: flex;
        justify-content: center;
    }

    .createButton {
        padding: 5px;
        height: 50%;
        width: 50%;
        align-self: center;
    }

    .projectInput {
        height: 2rem;
        width: 90%;
        margin: 5px;
        margin-bottom: 5px;
        padding: 2px;
        background-color: rgba(0,0,0,0);
    }

        .projectInput:focus {
            background-color: white;
            border-radius: 5px;
        }

    .mainContainer {
        height: 80%;
        width: 100%;
        padding: 10px;
    }

    .logo {
        font-size: 30px;
        margin: 0;
        font-weight: 700;
        margin-left: 0;
    }

    .loadButton {
        width: 95%;
        height: 75%;
        margin: 5px;
        background-color: white;
        border-radius: 5px;
    }

    .projectTitle {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 95%;
        padding: 5px;
    }

    .dropdown-toggle::after {
        display: none !important;
    }

    .modalAcceptButton {
        background-color: #5c78ff;
    }

    .modalCancelButton {
        border: solid 1px gray;
    }

</style>

<div class="container">
    <header class="container mt-5">
        <a href="#">
            <img src="/svgs/LOGO RADICAL.svg" alt="logo" height="50" href="#" />
        </a>
    </header>


    <div class="projectList">

        <button class="createContainer" @onclick="PVm.NewProject" title="Create Project">

            <img src="/svgs/Plus.svg"  class="createButton"/>
        </button>
        @foreach (var project in PVm.Portfolio.Projects)
        {
            <div class="projectContainer">


                <div class="projectTitle">

                    <input @bind="@project.Name" @bind:event="oninput" class="projectInput" @onchange="() => PVm.SaveLocalProject(project)"></input>
                    <button class="dropdown-toggle" style="width: 10%;" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <img src="/svgs/3 dots.svg"/>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <button class="dropdown-item" @onclick="() => {selected = project; vm.ShowDeleteProjectModal();}">
                            <img src="/svgs/Delete.svg"/> Delete project
                        </button>
                        <button class="dropdown-item" @onclick="() => PVm.ForkProject(project)">
                            <img src="/svgs/Fork.svg"/> Fork project
                        </button>
                    </div>
                    
                </div>
                <button @onclick="() => PVm.LoadDocuments(project)" class="loadButton">

                </button>

            </div>

            

        }

    </div>



</div>

<Modal @ref="vm.App.DeleteProjectModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideDeleteProjectModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-5">
                <div class="w-100 h-50 d-flex flex-column align-items-center">

                    <div class="p-4 mb-3">
                        <img src="/svgs/Delete1.svg" alt="Delete" height="50" />
                    </div>

                    <h2>Delete project</h2>

                    <p>
                        Your about to delete this project, are you sure?
                    </p>


                    <div class="d-flex justify-content-between w-100 mt-5">
                        <button @onclick="async () => {await PVm.DeleteProject(selected); vm.HideDeleteProjectModal();}" class="btn modalAcceptButton">Delete</button>
                        <button @onclick="vm.HideDeleteProjectModal" class="btn modalCancelButton">Cancel</button>
                    </div>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public string token { get; set; }

    public Project selected { get; set; }



    protected override async Task OnInitializedAsync()
    {

        try
        {
            if(token != "")
            {
                await PVm.LoadProyectAsync(token);

            }

        }
        catch
        {

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await loadStorage();

        }

    }

    public async Task loadStorage()
    {


        if (await localStorage.ContainKeyAsync("PortfolioLocal") == false)
        {
            await PVm.OnPropertyChanged();
            return;
        }


        LocalPortfolioDTO localPortfolio = new LocalPortfolioDTO();

        try
        {

            localPortfolio = await localStorage.GetItemAsync<LocalPortfolioDTO>("PortfolioLocal");

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        PVm.Portfolio.FromLocalDTO(localPortfolio);

        foreach(var GUID in localPortfolio.projectsGUID)
        {
            LocalProjectDTO dto = await localStorage.GetItemAsync<LocalProjectDTO>("Project-" + GUID);

            var DtoProject = new Project(PVm.Portfolio, dto);

            PVm.Portfolio.Projects.Add(DtoProject);

        }

       

        StateHasChanged();


    }



}
