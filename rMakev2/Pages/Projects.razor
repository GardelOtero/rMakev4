@page "/projects"
@page "/projects/{token}"
@using System.ComponentModel.DataAnnotations;
@using rMakev2.ViewModel;
@using rMakev2.Components;
@using rMakev2.Services;
@using rMakev2.Models;
@inject RmakeViewModel vm;
@inject ProjectViewModel PVm;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .projectList {
        display: flex;
        flex-direction: row;
        height: 80%;
        flex-wrap: wrap;
        padding: 5px;
        width: 100%;
    }

    .projectContainer {
        border: solid black 1px;
        border-radius: 5px;
        padding: 5px;
        margin: 10px;
        width: 10%;
        height: 20%;
    }

    .createButton {
        border: solid black 1px;
        border-radius: 5px;
        padding: 5px;
    }

    .projectInput {
        height: 2rem;
        width: 90%;
        margin: 5px;
        margin-bottom: 5px;
        padding: 2px;
    }

        .projectInput:focus {
            border: solid black 1px;
            border-radius: 5px;
        }

    .mainContainer {
        height: 80%;
        width: 100%;
        padding: 10px;
    }

</style>

<div class="mainContainer">
    <button @onclick="PVm.NewProject" class="createButton">Create project</button>

    <div class="projectList">


        @foreach (var project in PVm.Portfolio.Projects)
        {
            <div class="projectContainer">
                <input @bind="@project.Name" class="projectInput" @onblur="@PVm.OnPropertyChanged"></input>
                <button @onclick="() => PVm.DeleteProject(project)" class="createButton">Delete</button>
                <button @onclick="() => PVm.LoadDocuments(project)" class="createButton">Load</button>

            </div>
        }

    </div>



</div>

@code {
    [Parameter]
    public string token { get; set; }

    protected override async Task OnInitializedAsync()
    {

        try
        {

            //if(await localStorage.ContainKeyAsync(PVm.Portfolio.GUID))
            //{
            //    PVm.Portfolio = await localStorage.GetItemAsync<Portfolio>(PVm.Portfolio.GUID);
            //} else
            //{




            //    await localStorage.SetItemAsync(PVm.Portfolio.GUID, PVm.Portfolio);

            //}



        }
        catch
        {

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PVm.InitializeProjects(vm.App);

            await loadStorage();
            //await localStorage.ClearAsync();
            //await localStorage.SetItemAsync(vm.Project.GUID, vm.Project.Documents);
            //if (vm.Project.SelectedDocument.Content != "")
            //{
            //    await jsRuntime.InvokeVoidAsync("loadContent", objRef, vm.Project.Documents.FirstOrDefault().Content);
            //}
        }
        /*if (vm.Ui.EditProjectName == true && vm.Ui.EditedProjectName == false)
            {
            await jsRuntime.InvokeVoidAsync("focusInput");
            vm.Ui.EditedProjectName = true;
        }
        else if (vm.Ui.EditProjectName == false && vm.Ui.EditedProjectName == true)
            {
            vm.Ui.EditedProjectName = false;
        }*/
    }

    public async Task loadStorage()
    {
        IEnumerable<string> keys = await localStorage.KeysAsync();

        if (keys.Count() == 0)
        {
            return;
        }

        List<string> k = keys.ToList();

        List<Project> storagePortfolio = new List<Project>();

        foreach (var key in k)
        {
            if (key == "i18nextLng")
                continue;

            storagePortfolio = await localStorage.GetItemAsync<List<Project>>("projects");

            PVm.Portfolio.Projects = storagePortfolio;



            //Project newProj = new Project(vm.App.Portfolio);
            //storageProj = await localStorage.GetItemAsync<Project>(key);
            //newProj.Id = storageProj.Id;
            //newProj.Name = storageProj.Name;
            //newProj.CreationDate = storageProj.CreationDate;
            //newProj.PortfolioId = storageProj.PortfolioId;
            //newProj.Documents = storageProj.Documents;


            //foreach (var doc in newProj.Documents)
            //{
            //    doc.Project = newProj;
            //}
            //projects.Add(newProj);



        }

        //vm.App.Portfolio.Projects.AddRange(projects);
        //vm.DeleteProjectMenu(vm.Ui.SelectedProject);

        

    }



}
