@page "/app"
@page "/app/{token}"
@using rMakev2.ViewModel;
@using Microsoft.JSInterop;
@inject RmakeViewModel vm;
@inject ProjectViewModel PVm;
@inject IJSRuntime jsRuntime;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@using MudBlazor;
@using rMakev2.Models;
@using rMakev2.DTOs;
<PageTitle>rMake</PageTitle>

<style>
    .topBar {
        position: fixed;
        top: 0;
        width: 100%;
        background: rgba(255,255,255,0.5);
        backdrop-filter: blur(5px);
        padding-right: 15px;
        z-index: 3;
        border-bottom: 1px solid #f3f3f3;
        min-height: 100px;
    }

    .logo {
        font-size: 30px;
        margin: 0;
        font-weight: 50;
    }

    .subLogo {
        font-size: 9px;
        text-align: left;
        margin: 0px;
        margin-left: 50%
    }

    .barItems {
        float: right;
        width: 30px;
        margin: 10px;
        margin-left: 10px;
    }

    .projectName {
        min-width: 100px;
        width: 400px;
        padding-top: 15px !important;
        padding-right: 25px;
        margin-right: 15px;
        border-right: 1px solid #f1f1f1;
    }

    .brandArea {
        float: left;
        width: 80px;
        text-align: left;
        height: 0px;
    }

    .itemsArea {
        float: left;
        text-align: left;
        height: 50px;
        margin-left: 5px;
    }

    .leftArea {
        position: absolute;
        right: 0px;
        margin-right: 50px;
    }

    .book-explorer {
        position: fixed;
        top: 100px;
        left: 0px;
        z-index: 99;
        padding: 3px;
        background-color: #fff;
    }

    .bb-white {
        border-bottom: white;
    }

    .bt-white {
        border-top: white;
    }

    .minH-400 {
        min-height: 400px;
    }

    .maxH-400 {
        max-height: 400px;
    }

    .menuDocumentTitle {
        white-space: nowrap;
        overflow: hidden;
        margin-left: 0px;
        font-size: 13px;
        margin-bottom: 7px;
        transition: all 0.01s ease;
    }

        .menuDocumentTitle:hover {
            font-weight: 500;
            cursor: pointer;
        }

    .btn-Outline {
        background: none;
        color: #000;
    }

    .smallIcon {
        width: 12px;
        height: 12px;
    }

    .mdicon {
        width: 16px;
        height: 16px;
        color: #666;
        opacity: .3;
    }

    .documentMenu {
        border-radius: 5px;
        border: 1px solid #777;
        padding: 5px;
        padding-left: 0;
        width: 100px;
        display: flex;
        justify-content: space-evenly;
    }

    .spacer {
        width: 10px;
        height: 34px;
    }

    .menuBarsIcon {
        margin-left: 0px;
        border: solid rgba(0,0,0,.125) 2px;
        border-radius: 4px;
        padding: 5px;
    }

    .dots {
        display: block;
        padding: 10px;
    }

    .ql-size-huge {
        font-size: 2.5em;
    }

    .ql-size-large {
        font-size: 1.5em;
    }

    .ql-size-small {
        font-size: .75em;
    }

    .ql-syntax {
        background-color: #23241f;
        color: #f8f8f2;
        overflow: visible;
        white-space: pre-wrap;
        margin-bottom: 5px;
        margin-top: 5px;
        padding: 5px 10px;
        text-align: left;
    }

    .card {
        min-width: 200px;
        max-width: 200px;
        border: 2px solid rgba(0,0,0,.125);
        border-radius: 8px;
        position: absolute;
        z-index: 3;
    }

    .newcard {
        box-sizing: border-box;
        /*padding: 50px 50px;*/
        min-width: 200px;
        max-width: 200px;
        /*box-shadow: rgba(17, 17, 26, 0.1) 0px 4px 16px, rgba(17, 17, 26, 0.1) 0px 8px 24px, rgba(17, 17, 26, 0.1) 0px 16px 56px;*/
        /*box-shadow: rgba(17, 17, 26, 0.25) 0px 8px 24px, rgba(17, 17, 26, 0.1) 0px 16px 56px, rgba(17, 17, 26, 0.1) 0px 24px 80px;*/ /*71*/
        box-shadow: rgb(38, 57, 77, 0.5) 0px 1px 13px -3px;
        border-radius: 10px;
        font-weight: 500;
        color: #342e37;
        width: 30%;
    }

    .iconcard {
        box-sizing: border-box;
        /*padding: 50px 50px;*/
        /*box-shadow: rgba(17, 17, 26, 0.1) 0px 4px 16px, rgba(17, 17, 26, 0.1) 0px 8px 24px, rgba(17, 17, 26, 0.1) 0px 16px 56px;*/
        /*box-shadow: rgba(17, 17, 26, 0.25) 0px 8px 24px, rgba(17, 17, 26, 0.1) 0px 16px 56px, rgba(17, 17, 26, 0.1) 0px 24px 80px;*/ /*71*/
        box-shadow: rgb(38, 57, 77, 0.5) 0px 1px 13px -3px;
        border-radius: 10px;
        font-weight: 500;
        color: #342e37;
        width: 50px;
        height: 50px;
    }

    .iconcardbig {
        box-sizing: border-box;
        /*padding: 50px 50px;*/
        /*box-shadow: rgba(17, 17, 26, 0.1) 0px 4px 16px, rgba(17, 17, 26, 0.1) 0px 8px 24px, rgba(17, 17, 26, 0.1) 0px 16px 56px;*/
        /*box-shadow: rgba(17, 17, 26, 0.25) 0px 8px 24px, rgba(17, 17, 26, 0.1) 0px 16px 56px, rgba(17, 17, 26, 0.1) 0px 24px 80px;*/ /*71*/
        box-shadow: rgb(38, 57, 77, 0.5) 0px 1px 13px -3px;
        border-radius: 5px;
        font-weight: 500;
        color: #342e37;
        width: 50px;
        height: 250px;
    }

    .hrstyle {
        margin-top: 6px;
        margin-bottom: 6px;
        margin-left: 5px;
        margin-right: 5px;
        opacity: 0.2;
    }

    .hrstylemenu {
        margin-top: 1rem;
        margin-bottom: 1rem;
        margin-left: 3px;
        margin-right: 3px;
        opacity: 0.2;
    }

    .svgProject {
        opacity: 0.45;
    }

    .rightArea {
        margin-left: 5px;
        position: absolute;
        left: 0px;
    }

    .centerArea {
        margin-left: 100px;
        position: absolute;
        left: 0px;
    }

    .navbar-nav {
        flex-direction: row;
    }
</style>
<div class="container-fluid">
    <header>
        <nav class="navbar navbar-expand-lg navbar-light  topBar">
            <a class="navbar-brand rightArea" href="#">
                <div>
                    <div class="logo"><img src="svgs/LOGO RADICAL.svg" title="rMake" height="50px" width="50px" /></div>

                </div>
            </a>
            <div class="centerArea">
                @* <a class="navbar-brand rightArea" href="#">
                <p class="form-control-plaintext small text-left" style=" font-size:24px; margin-left:10px; margin-top:-25px;"> @vm.Project.Name</p>
                </a>
                </div>*@
                <ul class="navbar mr-auto">
                    <li class="nav-item" style="width: 500px">
                        <input @bind="@vm.Project.Name" class="form-control-plaintext text-left" style=" font-size:20px; margin-left:10px; margin-right:10px; margin-top: 5px; width:90%;"> <strong>@vm.Project.Name</strong></input>
                    </li>
                </ul>
            </div>
            <div class="leftArea">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item iconcard ml-2">
                        <a class="barItems" @onclick="backToProjects"><img src="svgs/Back icon.svg" class="svgProject" title="Return to Portfolio" width="30px" height="30px" /> </a>
                    </li>
                    <li class="nav-item iconcard ml-1">
                        <a class="barItems" @onclick=" vm.ShowSaveModal"><img src="svgs/Save portafolio icon.svg" class="svgProject" title="Save Portfolio" width="30px" height="30px" /> </a>
                    </li>
                    <li class="nav-item iconcard ml-1">
                        <a class="barItems" @onclick="vm.ShowAuthorModal"><img src="/svgs/autor project.svg" class="svgProject" title="Author Project" width="30px" height="30px"/> </a>
                    </li>
                </ul>
            </div>



            @*            <div class="leftArea">
            <ul class="navbar-nav mr-auto">
            <li class="spacer">
            </li>
            <li class="nav-item active projectName">
            <p class="form-control-plaintext small text-left" style=" font-size:16px; margin-left:10px; margin-top:-5px;"> @vm.Project.Name</p>
            </li>
            <li class="nav-item">
            <a class="barItems" @onclick=" vm.ShowSaveModal"><img src="svgs/asset 1.svg" title="Save Project" /> </a>
            </li>
            <li class="nav-item" style="padding-right: 25px; margin-right: 15px; border-right: 1px solid #f1f1f1;">
            <a class="barItems" @onclick=" vm.ShowPublishModal"><img src="svgs/asset 3.svg" title="Publish" /> </a>

            </li>
            <li class="nav-item">
            <a class="barItems" @onclick="vm.ShowAuthorModal"><img src="/svgs/Arrow up.svg" title="Load" /> </a>
            </li>

            <li class="nav-item">
            <a class="barItems" @onclick="vm.ShowJsonModal"><img src="svgs/json view.svg" title="Json View" /> </a>

            </li>
            </ul>
            </div>*@
        </nav>
    </header>

    <section>
        <div class="row mt-15 pt-15">
            <menu>
                <div class="d-flex align-items-start position-fixed">
                    <div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                        <button @onclick="vm.DisplayMenu" class="nav-link iconcard" type="button" role="tab" title="Outline"><img src="svgs/Menu.svg" width="25px" height="25px" /></button>
                        <div class="spacer"></div>
                        <div class="iconcardbig">
                            <button @onclick="@newDoc" class="nav-link" type="button" role="tab" title="Add Document"><img src="svgs/Plus.svg" width="20px" height="20px" /></button>
                            <hr class="hrstyle" />
                            <button @onclick="vm.ShowSaveModal" class="nav-link" type="button" role="tab" aria-controls="v-pills-profile" aria-selected="false" title="Save Document"><img src="svgs/Save.svg" width="20px" height="20px" /></button>
                            <hr class="hrstyle" />
                            <button @onclick="deleteDoc" class="nav-link" type="button" role="tab" aria-controls="v-pills-disabled" aria-selected="true" title="Delete Document"><img src="svgs/Delete1.svg" width="20px" height="20px" /></button>
                            <hr class="hrstyle" />
                            <button @onclick=" vm.ShowPublishModal" class="nav-link" type="button" role="tab" aria-controls="v-pills-messages" aria-selected="false" title="Publish Document"><img src="svgs/PUBLISH ICON.svg" width="20px" height="20px" /></button>
                            <hr class="hrstyle" />
                            <button @onclick="vm.ShowDocAuthorModal" class="nav-link" type="button" role="tab" aria-controls="v-pills-settings" aria-selected="false" title="Author Document"><img src="svgs/Autor icon.svg" width="20px" height="20px" /></button>
                        </div>
                        <div class="spacer"></div>
                        <button @onclick="vm.CloneDocument" class="nav-link iconcard" type="button" role="tab" aria-controls="v-pills-settings" aria-selected="false" title="Fork Document"><img src="svgs/Fork.svg" width="20px" height="20px" /></button>
                        <div class="spacer"></div>
                        <button class="nav-link iconcard" type="button" role="tab" aria-controls="v-pills-settings" aria-selected="false" title="Json View"><img src="svgs/jsonicon.svg" width="25px" height="25px" style=" margin-left:-2px" /></button>
                    </div>
                </div>
                @if (vm.Project.DisplayMenu == true)
                {
                    <div class="col-sm-12 col-md-3 col-lg-3 col-xl-2 p-1 pl-1 ml-3 position-fixed" style="left: 6rem">
                        <div class="newcard">
                            <div class="card-body minH-400 maxH-400 overflow-auto positon-fixed" style="left: 6rem">
                                @*@foreach (var project in vm.App.Portfolio.Projects)
                            {
                            <div class="w-100" style="background-color: rgba(0,0,0,.125)">
                            @if (project.Name == "")
                            {
                            <p @onclick="@(() => ChangeProject(project))" style="cursor:pointer; ">Project Name</p>
                            }
                            else
                            {
                            <p @onclick="@(() => ChangeProject(project))" style="cursor:pointer; background-color: rgba(0,0,0,.125)">@project.Name</p>
                            }

                            </div>*@
                                @foreach (var document in vm.Project.Documents)
                                {
                                    @if (document.GUID == vm.Project.SelectedDocument.GUID)
                                    {
                                        <div class="col-12">
                                            @if (document.Name == "")
                                            {
                                                <p @onclick="@(() => ChangeContent(document))" style="text-overflow:ellipsis; background-color:rgb(216,90,208,0.5); padding:4px; border-radius:4px;" class="menuDocumentTitle">Untitled</p>
                                            }
                                            else
                                            {
                                                <p @onclick="@(() => ChangeContent(document))" style="text-overflow:ellipsis; background-color:rgb(216,90,208,0.5); padding:4px; border-radius:4px;" class="menuDocumentTitle">@document.Name</p>
                                            }
                                            <hr class="hrstylemenu" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-12">
                                            @if (document.Name == "")
                                            {
                                                <p @onclick="@(() => ChangeContent(document))" style="text-overflow:ellipsis; padding:4px;" class="menuDocumentTitle">Untitled</p>
                                            }
                                            else
                                            {
                                                <p @onclick="@(() => ChangeContent(document))" style="text-overflow:ellipsis; padding:4px;" class="menuDocumentTitle">@document.Name</p>
                                            }
                                            <hr class="hrstylemenu" />
                                        </div>
                                    }
                                }



                            </div>
                        </div>
                    </div>
                }
            </menu>


            @*working area*@
            <div class="col-sm-12 col-md-9 col-lg-9 col-xl-10 mt-5 pl-6 ml-10">
                <div class="row">
                    <div class="col-4 col-xl-3">
                        @*@if (vm.Project.DisplayDocumentMenu == true)
                        {
                        <div class="spacer">

                        <div class="documentMenu mb-2">
                        <a @onclick="deleteDoc"><img src="svgs/Delete.svg" title="Delete Document" class="m-1 smallIcon" /></a>

                        <a @onclick="vm.CloneDocument"><img src="svgs/Clone.svg" title="Clone Document" class="m-1 smallIcon" /></a>
                        <a><img src="svgs/Merge.svg" title="Merge Documents comming soon" class="m-1 smallIcon" /></a>
                        <a @onclick="vm.ShowDocAuthorModal"><img src="/svgs/Arrow up.svg" title="Add Document Authors" class="m-1 smallIcon" /></a>
                        @*                            <a @onclick="vm.orderElements"><img src="svgs/Elements .svg" title="Sort Elements" Class="smallIcon" /></a>

                        </div>
                        </div>
                        }
                        else
                        {
                        <div class="spacer"></div>

                        }*@

                    </div>
                    <div class="col-8 col-xl-9">
                        @*                        <div style="width:20px; float:left; margin-top:15px;">
                        <a>
                        <img src="svgs/3 dots.svg" title="Document Menu" class="dots " @onclick="vm.DocumentMenu" />
                        </a>
                        </div>*@

                        <div style="width:90%; float:left;">

                            <div style="height: 50%; padding: 5px; ">
                                <textarea @bind="@vm.Project.SelectedDocument.Name"
                                @bind:event="oninput"
                                @onchange="() => SaveTitle(vm.Project.SelectedDocument)"
                                          id="PageName"
                                          autofocus="true"
                                @onblur="vm.UnBlockRTAFocus"
                                @onclick="vm.BlockRTAFocus"
                                          class="form-control-plaintext small"
                                          style="color: #342e37; font-size:30px; height: fit-content; inline-size: 100%; overflow-wrap: break-word; text-align: center;" placeholder="Write your title here" />
                                <div>
                                    @if (vm.Project.SelectedDocument.Authors.Count() > 0)
                                    {

                                        <p style="margin:3px; height: fit-content; padding-left: 15px; color: #342e37;">
                                            By @string.Join(", ", vm.Project.SelectedDocument.Authors)
                                        </p>

                                    }

                                </div>
                            </div>
                            <div class="clearfix"></div>
                            <div class="mt-4 ml-6">
                                <div class="mt-4">
                                    <div class="ce-example">
                                        <div class="ce-example__content">
                                            <div id="editorjs"></div>
                                        </div>
                                    </div>
                                    <div class="clearfix"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @*

            <div style="width:20%; background-color:#f3f3f3; position:fixed; right:0px; top:110px; height:620px; padding:5px;" class=" @(vm.Project.DisplayJson? "d-block" : "d-none" )">
            <textarea readonly style="color:#0f0; width:100%; margin:auto; font-size:10px; background-color:#000; border-radius:0px; height:100%; text-align:left;">
            @vm.Project.JsonFn();
            </textarea>
            </div>*@

        </div>
    </section>
</div>


<Modal @ref="vm.App.SaveModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose your server</h2>
                    <p>Save your token to retrive your content</p>
                    <h5> @PVm.Portfolio.GUID</h5>
                    <Button @onclick="@(() => clipboard(PVm.Portfolio.GUID))">Copy Hash</Button>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            rMake@Rebel-server
                        </label>
                    </div>
                    <button @onclick="NewSave" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@*<Modal @ref="vm.App.Ui.LoadModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideLoadModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Load project</h2>
                    <input Id="token" @bind="tokenstring" class="form-control-index small" placeholder="example: 24256aG-A90n56D3-a722" autofocus />
                    <button @onclick="navigate" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Load</button>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
*@

<Modal @ref="vm.App.AuthorModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideAuthorModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Add Project Author</h2>
                    <input Id="authorInput" @bind="authorString" class="form-control-index small" placeholder="Author Name" autofocus />
                    <button @onclick="async () => {vm.Project.AddAuthor(authorString); authorString = string.Empty; await PVm.SaveLocalProject(vm.Project);}" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Add</button>
                </div>
            </div>
            @if (vm.Project.Authors.Count() > 0)
            {
                <div class="h-100 p-4">
                    <div class="w-100 h-50">
                        <h2>Current Authors</h2>
                        @foreach (var author in vm.Project.Authors)
                        {
                            <p>@author <button @onclick="() => vm.Project.RemoveAuthor(author)" class="btn btn-danger" style="margin-left: 50%;">Delete</button></p>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="h-100 p-4">
                    <div class="w-100 h-50">
                        <h2>There are no authors</h2>
                    </div>
                </div>
            }
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="vm.App.DocAuthorModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideDocAuthorModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Add Document Author</h2>
                    <input Id="docAuthorInput" @bind="docAuthorString" class="form-control-index small" placeholder="Author Name" autofocus />
                    <button @onclick="async () => {vm.Project.SelectedDocument.AddAuthor(docAuthorString); docAuthorString = string.Empty; await PVm.SaveLocalProject(vm.Project);}" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Add</button>
                </div>
            </div>
            @if (vm.Project.SelectedDocument.Authors.Count() > 0)
            {
                <div class="h-100 p-4">
                    <div class="w-100 h-50">
                        <h2>Current Authors</h2>
                        @foreach (var author in vm.Project.SelectedDocument.Authors)
                        {
                            <p>@author <button @onclick="() => vm.Project.SelectedDocument.RemoveAuthor(author)" class="btn btn-danger" style="margin-left: 50%;">Delete</button></p>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="h-100 p-4">
                    <div class="w-100 h-50">
                        <h2>There are no authors</h2>
                    </div>
                </div>
            }
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="vm.App.PublishModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HidePublishModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Where do you want to publish your content</h2>
                    <p>rMake is a decentralized solution for creators.</p>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                        <label class="form-check-label" for="flexCheckDefault">
                            www.xipegroup.com
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalcompanies.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalpurpose.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.anotherwebsite.org
                        </label>
                    </div>
                    <button @onclick=" vm.PublishContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Publish</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@*<Modal @ref="vm.App.Ui.MergeModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose Documents to Merge</h2>
                    <p>How it works...</p>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
*@
@code {
    string tokenstring;
    string authorString;
    string docAuthorString;
    private DotNetObjectReference<Alternativo>? objRef;
    string elementsC;
    private string projectName;
    [Parameter]
    public string token { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            if (token != "" && token != null)
            {
                if (PVm.Portfolio.Projects.Where(x => x.GUID == token).FirstOrDefault() != null)
                    vm.Project = PVm.Portfolio.Projects.Where(x => x.GUID == token).FirstOrDefault();




                if (vm.Project.Documents.Count() == 0)
                {
                    vm.Project.AddDocument(vm.Project);
                }
                else if (vm.Project.SelectedDocument == null)
                {
                    vm.Project.SelectedDocument = vm.Project.Documents.FirstOrDefault();
                }

            }
            else
            {
                await localStorage.ClearAsync();

                if (PVm.Portfolio == null)
                {
                    await PVm.InitializeProjects(vm.App);
                }


                if (PVm.Portfolio.Projects.Count() <= 0)
                {
                    PVm.Portfolio.AddProject();

                    vm.Project = PVm.Portfolio.Projects.First();

                    token = vm.Project.GUID;

                }

                await PVm.OnPropertyChanged();

            }
        }
        catch
        {

        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("runEditor", objRef);


            //await localStorage.SetItemAsync("documents", vm.Project);

        }


    }

    async void navigate()
    {
        if (tokenstring != "")
        {
            await localStorage.ClearAsync();
            NavigationManager.NavigateTo("/App/" + tokenstring, forceLoad: true);
        }
    }

    [JSInvokable]
    public async Task LoadPortfolio()
    {

        LocalPortfolioDTO localPortfolio = new LocalPortfolioDTO();
        localPortfolio = await localStorage.GetItemAsync<LocalPortfolioDTO>("PortfolioLocal");
        PVm.Portfolio.FromLocalDTO(localPortfolio);

        LocalProjectDTO dto = await localStorage.GetItemAsync<LocalProjectDTO>("Project-" + token);

        LocalProjectDTO localProject = new LocalProjectDTO();

        var DtoProject = new Project(PVm.Portfolio, dto);

        PVm.Portfolio.Projects.Add(DtoProject);

        foreach (var docGUID in dto.DocumentsGUID)
        {
            LocalDocumentDTO docDto = await localStorage.GetItemAsync<LocalDocumentDTO>("Document-" + docGUID);

            var newDoc = new Document(DtoProject, docDto);

            DtoProject.Documents.Add(newDoc);


            LocalElementDTO eleDto = await localStorage.GetItemAsync<LocalElementDTO>("Element-" + docDto.ElementsGUID.First());

            var newEle = new Element(newDoc, eleDto);

            newDoc.Elements = new List<Element>();

            newDoc.Elements.Add(newEle);

        }

        vm.Project = DtoProject;

        if (vm.Project.Documents.Count() == 0)
        {
            vm.Project.AddDocument(vm.Project);
        }


        vm.Project.SelectedDocument = vm.Project.Documents.FirstOrDefault();


        if (vm.Project.SelectedDocument.Content != "")
        {
            await jsRuntime.InvokeVoidAsync("loadContent", objRef, vm.Project.SelectedDocument.Content);
        }




        //        DtoProject.Documents.Add(newDoc);


        //        LocalElementDTO eleDto = await localStorage.GetItemAsync<LocalElementDTO>("Element-" + docDto.ElementsGUID.First());

        //        var newEle = new Element(newDoc, eleDto);

        //        newDoc.Elements = new List<Element>();

        //        newDoc.Elements.Add(newEle);

        //    }

        //    if(GUID == token)
        //    {
        //        vm.Project = PVm.Portfolio.Projects.Where(x => x.GUID == token).FirstOrDefault();

        //        if (vm.Project.Documents.Count() == 0)
        //        {
        //            vm.Project.AddDocument(vm.Project);
        //        }


        //        vm.Project.SelectedDocument = vm.Project.Documents.FirstOrDefault();


        //        if (vm.Project.SelectedDocument.Content != "")
        //        {
        //            await jsRuntime.InvokeVoidAsync("loadContent", objRef, vm.Project.SelectedDocument.Content);
        //        }
        //    }

        //}


        StateHasChanged();

    }
    private void HandleInputProjectName(ChangeEventArgs e) => projectName = e.Value.ToString();
    [JSInvokable]
    public async Task SaveStorage()
    {
        await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Project.SelectedDocument);

    }

    public async Task NewSave()
    {
        // await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Ui.SelectedDocument);

        List<Project> projects = new List<Project>();
        List<Document> docs = new List<Document>();

        foreach (var project in vm.App.Portfolio.Projects)
        {
            docs.AddRange(project.Documents);
        }

        foreach (var document in docs)
        {
            if (!await localStorage.ContainKeyAsync(document.GUID)) { continue; }

            // if(document.Id == vm.Ui.SelectedDocument.Id)
            {
                //   vm.Ui.SelectedDocument.Name = document.Name;
            }

            Document newDoc = await localStorage.GetItemAsync<Document>(document.GUID);
            document.Name = newDoc.Name;
            document.Content = newDoc.Content;
        }

        await PVm.SaveContentAsync();
    }

    public async Task PeriodicSave()
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

        while (await timer.WaitForNextTickAsync())
        {
            await NewSave();
        }
    }

    [JSInvokable]
    public async Task SaveContent(string content, Document doc)
    {
        vm.BlocktoElement(content);
        Document document = vm.Project.Documents.Where(x => x.GUID == doc.GUID).FirstOrDefault();
        document.Content = content;
        //await localStorage.SetItemAsync(doc.ProjectId, vm.Project.Documents);

        await localStorage.SetItemAsync("Project-" + doc.ProjectId, vm.Project.ToLocalStorage());

        await localStorage.SetItemAsync("Document-" + doc.GUID, doc.ToLocalStorage());

        foreach (var ele in doc.Elements)
        {
            await localStorage.SetItemAsync("Element-" + ele.GUID, ele.ToLocalStorage());
        }


        PVm.UpdateProject(vm.Project);
        vm.Project.SelectedDocument = vm.Project.Documents.Where(x => x.GUID == vm.Project.SelectedDocument.GUID).FirstOrDefault();
    }

    public void SaveTitle(Document doc)
    {
        PVm.UpdateProject(vm.Project);
        vm.Project.SelectedDocument = vm.Project.Documents.Where(x => x.GUID == vm.Project.SelectedDocument.GUID).FirstOrDefault();
    }

    public async Task ChangeContent(Document newDoc)
    {
        await jsRuntime.InvokeAsync<string>("changeContent", objRef, vm.Project.SelectedDocument, newDoc);
    }

    [JSInvokable]
    public async Task SetDocumentContent(Document document)
    {

        var localDoc = await localStorage.GetItemAsync<LocalDocumentDTO>("Document-" + document.GUID);

        if (localDoc.Content != null && localDoc.Content != "")
        {
            await jsRuntime.InvokeVoidAsync("loadContent", objRef, localDoc.Content);
        }

        vm.Project.SelectedDocument = vm.Project.Documents.Where(x => x.GUID == localDoc.GUID).FirstOrDefault();


        StateHasChanged();
    }

    [JSInvokable]
    public async Task CallJSSave(Document doc)
    {
        var jsContent = await jsRuntime.InvokeAsync<string>("saveContent", objRef, doc);
    }



    public async Task newDoc()
    {
        await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Project.SelectedDocument);
        await jsRuntime.InvokeAsync<string>("ClearEditor");

        vm.NewDocumentMenu(vm.Project);

    }

    public async Task deleteDoc()
    {
        vm.Project.RemoveDocument(vm.Project.SelectedDocument);

        if (vm.Project.Documents.Count() <= 0)
        {
            vm.Project.AddDocument(vm.Project);

            vm.SelectDocument(vm.Project.Documents.First());

            await jsRuntime.InvokeAsync<string>("ClearEditor");

        }
        else
        {
            vm.SelectDocument(vm.Project.Documents.First());

            await SetDocumentContent(vm.Project.SelectedDocument);

        }

    }


    public async Task clipboard(string copied)
    {
        await jsRuntime.InvokeVoidAsync("copyTextToClipboard", copied);
    }
    [JSInvokable]
    public async Task blocks(string content)
    {
        elementsC = content;
        vm.BlocktoElement(elementsC);
    }

    [JSInvokable]
    public async Task cloneBlock(string id)
    {
        string newContent = vm.elementClone(id);
        await jsRuntime.InvokeVoidAsync("loadContent", objRef, newContent);
        await SaveStorage();
    }

    //public async Task callblocks()
    //{
    //    await jsRuntime.InvokeVoidAsync("elementsEditor", objRef, elementsC);
    //    var hola = elementsC;
    //}

    [JSInvokable]
    public async Task StateChange()
    {
        StateHasChanged();
    }

    public void backToProjects()
    {
        NavigationManager.NavigateTo("/projects");
    }





}
