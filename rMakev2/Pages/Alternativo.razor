@page "/app"
@page "/app/{token}"
@using rMakev2.ViewModel;
@inject RmakeViewModel vm;
@inject ProjectViewModel PVm;
@inject IJSRuntime jsRuntime;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@using MudBlazor;
@using rMakev2.Models
<PageTitle>rHacker</PageTitle>

<style>
    .topBar {
        position: fixed;
        top: 0;
        width: 100%;
        background: rgba(255,255,255,0.5);
        backdrop-filter: blur(5px);
        padding-right: 15px;
        z-index: 3;
        border-bottom: 1px solid #f3f3f3;
        min-height: 100px;
    }

    .logo {
        font-size: 30px;
        margin: 0;
        font-weight: 700;
        margin-left: 50%
    }

    .subLogo {
        font-size: 9px;
        text-align: left;
        margin: 0px;
        margin-left: 50%
    }

    .barItems {
        float: right;
        width: 30px;
        margin: 10px;
        padding: 5px;
        margin-left: 10px;
    }

    .projectName {
        min-width: 100px;
        width: 400px;
        padding-top: 15px !important;
        padding-right: 25px;
        margin-right: 15px;
        border-right: 1px solid #f1f1f1;
    }

    .brandArea {
        float: left;
        width: 80px;
        text-align: left;
        height: 0px;
    }

    .itemsArea {
        float: left;
        text-align: left;
        height: 50px;
        margin-left: 5px;
    }

    .leftArea {
        position: absolute;
        right: 0px;
        margin-right: 50px;
    }

    .book-explorer {
        position: fixed;
        top: 100px;
        left: 0px;
        z-index: 99;
        padding: 3px;
        background-color: #fff;
    }

    .bb-white {
        border-bottom: white;
    }

    .bt-white {
        border-top: white;
    }

    .minH-500 {
        min-height: 500px;
    }

    .maxH-500 {
        max-height: 500px;
    }

    .menuDocumentTitle {
        white-space: nowrap;
        overflow: hidden;
        margin-left: 0px;
        max-width: 150px;
        font-size: 13px;
        margin-bottom: 7px;
        transition: all 0.01s ease;
    }

        .menuDocumentTitle:hover {
            font-weight: 500;
            cursor: pointer;
        }

    .btn-Outline {
        background: none;
        color: #000;
    }

    .smallIcon {
        width: 12px;
        height: 12px;
    }

    .mdicon {
        width: 16px;
        height: 16px;
        color: #666;
        opacity: .3;
    }

    .documentMenu {
        border-radius: 5px;
        border: 1px solid #777;
        padding: 5px;
        padding-left: 0;
        width: 125px;
        display: flex;
        justify-content: space-evenly;
    }

    .spacer {
        width: 10px;
        height: 34px;
    }

    .menuBarsIcon {
        margin-left: 0px;
        border: solid rgba(0,0,0,.125) 2px;
        border-radius: 4px;
        padding: 5px;
    }

    .dots {
        display: block;
        padding: 10px;
    }

    .ql-size-huge {
        font-size: 2.5em;
    }

    .ql-size-large {
        font-size: 1.5em;
    }

    .ql-size-small {
        font-size: .75em;
    }

    .ql-syntax {
        background-color: #23241f;
        color: #f8f8f2;
        overflow: visible;
        white-space: pre-wrap;
        margin-bottom: 5px;
        margin-top: 5px;
        padding: 5px 10px;
        text-align: left;
    }

    .card {
        min-width: 250px;
        max-width: 250px;
        border: 2px solid rgba(0,0,0,.125);
        border-radius: 8px;
        position: absolute;
        z-index: 3;
    }

    .rightArea {
        margin-left: 5px;
        position: absolute;
        left: 0px;
    }
</style>
<div class="container-fluid">
    <header>
        <nav class="navbar navbar-expand-lg navbar-light  topBar">
            <a class="navbar-brand rightArea" href="#">
                <div>
                    <div class="logo"><img src="svgs/rMake icon.svg" title="rMake" /></div>
                    <div class="subLogo"> Hacker Mode </div>
                </div>
            </a>


            <div class="leftArea">
                <ul class="navbar-nav mr-auto">
                    <li class="spacer">
                    </li>
                    <li class="nav-item active projectName">
                        <p class="form-control-plaintext small text-left" style=" font-size:16px; margin-left:10px; margin-top:-5px;"> @vm.Project.Name</p>
                        @*                        <input Id="ProjectName" @bind="@vm.Ui.SelectedProject.Name" class="form-control-plaintext small text-left" style=" font-size:16px; margin-left:10px; margin-top:-5px; !important; " placeholder="Project Name" autofocus @onclick="vm.BlockRTAFocus" />
                        *@
                    </li>
                    <li>
                        @*<a class="barItems" @onclick="NewProj"><img src="svgs/Plus.svg" title="Create Project" /> </a>*@
                    </li>
                    <li class="nav-item">
                        @*                        <a class="barItems" @onclick="() => vm.DeleteProjectMenu(vm.Ui.SelectedProject)"><img src="svgs/Delete.svg" title="Delete Project" /> </a>
                        *@
                    </li>
                    <li class="nav-item">
                        @*                        <a class="barItems" @onclick=" vm.ShowSaveModal"><img src="svgs/asset 1.svg" title="Save Project" /> </a>
                        *@
                    </li>
                    <li class="nav-item">
                        @*                        <a class="barItems" @onclick=" vm.ShowLoadModal"><img src="svgs/File icon.svg" title="Load" /> </a>
                        *@
                    </li>
                    <li class="nav-item" style="padding-right: 25px; margin-right: 15px; border-right: 1px solid #f1f1f1;">
                        @*                        <a class="barItems" @onclick=" vm.ShowPublishModal"><img src="svgs/asset 3.svg" title="Publish" /> </a>
                        *@
                    </li>
                    <li class="nav-item">
                        @*                        <a class="barItems" @onclick="vm.ForkProject"><img src="svgs/Fork.svg" title="Fork Project" /> </a>
                        *@
                    </li>
                    <li class="nav-item" style="padding-right: 25px; margin-right: 15px; border-right: 1px solid #f1f1f1;">
                        @*                        <a class="barItems" @onclick="vm.ForkProject"><img src="svgs/Merge.svg" title="Merge Projects" /> </a>
                        *@
                    </li>
                    <li class="nav-item">
                        @*                        <a class="barItems" @onclick="vm.ShowJsonModal"><img src="svgs/json view.svg" title="Json View" /> </a>
                        *@
                    </li>
                </ul>
            </div>
        </nav>
    </header>

    <section>
        <div class="row mt-15 pt-15">
            <menu>
                <i @onclick="vm.DisplayMenu" class="small mb-1 pl-4 position-fixed" style="right: 3rem"><img src="svgs/Menu Bar.svg" title="Publish" class="menuBarsIcon" /></i>
                @if (vm.Project.DisplayMenu == true)
                {
                    <div class="col-sm-12 col-md-3 col-lg-3 col-xl-2 mt-6 p-1 pl-1 ml-3 position-fixed" style="right: 3rem">
                        <div class="card mt-3">
                            <div class="card-body minH-500 maxH-500 overflow-auto positon-fixed" style="right: 3rem">
                                @*@foreach (var project in vm.App.Portfolio.Projects)
                            {
                            <div class="w-100" style="background-color: rgba(0,0,0,.125)">
                            @if (project.Name == "")
                            {
                            <p @onclick="@(() => ChangeProject(project))" style="cursor:pointer; ">Project Name</p>
                            }
                            else
                            {
                            <p @onclick="@(() => ChangeProject(project))" style="cursor:pointer; background-color: rgba(0,0,0,.125)">@project.Name</p>
                            }

                            </div>*@
                                @foreach (var document in vm.Project.Documents)
                                {
                                    <div class="col-12">
                                        @if (document.Name == "")
                                        {
                                            <p @onclick="@(() => ChangeContent(document))" style="text-overflow:ellipsis;" class="menuDocumentTitle">Untitled</p>
                                        }
                                        else
                                        {
                                            <p @onclick="@(() => ChangeContent(document))" style="text-overflow:ellipsis;" class="menuDocumentTitle">@document.Name</p>
                                        }
                                    </div>
                                }

                                <div class=" mt-4">
                                    <button @onclick="@newDoc" class="small" style="font-size:10px;">  <img src="svgs/Plus.svg" title="New Document" class="mr-2 smallIcon" />New Document </button>
                                    <hr />
                                </div>

                            </div>
                        </div>
                    </div>
                }
            </menu>


            @*working area*@
            <div class="col-sm-12 col-md-7 col-lg-7 col-xl-8 mt-5 pl-6 ml-10">

                @if (vm.Project.DisplayDocumentMenu == true)
                {
                    <div class="spacer">

                        <div class="documentMenu mb-2">
                            <a @onclick="vm.DeleteDocument"><img src="svgs/Delete.svg" title="Delete Document" class="m-1 smallIcon" /></a>

                            <a @onclick="vm.CloneDocument"><img src="svgs/Clone.svg" title="Clone Document" class="m-1 smallIcon" /></a>
                            <a><img src="svgs/Merge.svg" title="Merge Documents comming soon" class="m-1 smallIcon" /></a>
@*                            <a @onclick="vm.orderElements"><img src="svgs/Elements .svg" title="Sort Elements" Class="smallIcon" /></a>
*@                        </div>
                    </div>
                }
                else
                {
                    <div class="spacer"></div>

                }
                


                <div style="width:20px; float:left; margin-top:15px;">
                    <a>
                        <img src="svgs/3 dots.svg" title="Document Menu" class="dots " @onclick="vm.DocumentMenu" />
                    </a>
                </div>

                <div style="width:90%; float:left;">

                    <textarea @bind="@vm.Project.SelectedDocument.Name"
                    @bind:event="oninput"
                              id="PageName"
                              autofocus="true"
                    @onblur="vm.UnBlockRTAFocus"
                    @onclick="vm.BlockRTAFocus"
                              class="form-control-plaintext small"
                              style="color: #342e37; font-size:30px; margin:10px; height: fit-content; padding-left: 15px; inline-size: 75%; overflow-wrap: break-word; text-align: left;" placeholder="Write your title here" />
                    <div class="clearfix"></div>
                    <div class="mt-4 ml-6">
                        <div class="mt-4">
                            <div class="ce-example">
                                <div class="ce-example__content">
                                    <div id="editorjs"></div>
                                </div>
                            </div>
                            <div class="clearfix"></div>
                        </div>
                    </div>
                </div>
            </div>


            @*       <div style="width:20%; background-color:#f3f3f3; position:fixed; right:0px; top:110px; height:620px; padding:5px;" class=" @(vm.Ui.DisplayJson? "d-block" : "d-none" )">
            <textarea readonly style="color:#0f0; width:100%; margin:auto; font-size:10px; background-color:#000; border-radius:0px; height:100%; text-align:left;">
            @vm.Ui.JsonFn();
            </textarea>
            </div>
            *@
        </div>
    </section>
</div>


@*<Modal @ref="vm.App.Ui.SaveModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose your server</h2>
                    <p>Save your token to retrive your content</p>
                    <h5> @vm.App.Portfolio.Id</h5>
                    <Button @onclick="@(() => clipboard(vm.App.Portfolio.Id))">Copy Hash</Button>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            rMake@Rebel-server
                        </label>
                    </div>
                    <button @onclick="NewSave" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
*@
@*<Modal @ref="vm.App.Ui.LoadModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideLoadModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Load project</h2>
                    <input Id="token" @bind="tokenstring" class="form-control-index small" placeholder="example: 24256aG-A90n56D3-a722" autofocus />
                    <button @onclick="navigate" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Load</button>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
*@
@*<Modal @ref="vm.App.Ui.PublishModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Where do you want to publish your content</h2>
                    <p>rMake is a decentralized solution for creators.</p>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                        <label class="form-check-label" for="flexCheckDefault">
                            www.xipegroup.com
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalcompanies.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalpurpose.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.anotherwebsite.org
                        </label>
                    </div>
                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
*@
@*<Modal @ref="vm.App.Ui.MergeModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose Documents to Merge</h2>
                    <p>How it works...</p>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
*@
@code {
    bool _isExpanded = true;
    MudListItem selectedItem;
    object selectedValue = 1;
    string tokenstring;
    private DotNetObjectReference<Alternativo>? objRef;
    bool loaded = false;
    Project project = new Project();

    [Parameter]
    public string token { get; set; }

    protected RichTextEdit richTextEditRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            if (token != "")
            {
                if (PVm.Portfolio.Projects.Where(x => x.GUID == token).FirstOrDefault() != null)
                    vm.Project = PVm.Portfolio.Projects.Where(x => x.GUID == token).FirstOrDefault();




                if(vm.Project.Documents.Count() == 0)
                {
                    vm.Project.AddDocument(vm.Project);
                } 
                else if (vm.Project.SelectedDocument == null)
                {
                    vm.Project.SelectedDocument = vm.Project.Documents.FirstOrDefault();
                }

            }
        }
        catch
        {

        }
    }

    protected override bool ShouldRender()
    {
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("runEditor", objRef);

            //await LoadPortfolio();


            //await localStorage.ClearAsync();
            await localStorage.SetItemAsync("documents", vm.Project);
            //if (vm.Project.SelectedDocument.Content != "")
            //{
            //    await jsRuntime.InvokeVoidAsync("loadContent", objRef, vm.Project.Documents.FirstOrDefault().Content);
            //}
        }
        /*if (vm.Ui.EditProjectName == true && vm.Ui.EditedProjectName == false)
            {
            await jsRuntime.InvokeVoidAsync("focusInput");
            vm.Ui.EditedProjectName = true;
        }
        else if (vm.Ui.EditProjectName == false && vm.Ui.EditedProjectName == true)
            {
            vm.Ui.EditedProjectName = false;
        }*/
    }

    async void navigate()
    {
        if (tokenstring != "")
        {
            await localStorage.ClearAsync();
            NavigationManager.NavigateTo("/App/" + tokenstring, forceLoad: true);
        }
    }

    [JSInvokable]
    public async Task loadStorage()
    {
        IEnumerable<string> keys = await localStorage.KeysAsync();

        if (keys.Count() == 0)
        {
            return;
        }

        List<string> k = keys.ToList();

        //List<Project> projects = new List<Project>();
        List<Document> storageProj;



        foreach (var key in k)
        {
            if (key == "i18nextLng")
                continue;

            //Project newProj = new Project(vm.App.Portfolio);
            //storageProj = await localStorage.GetItemAsync<Project>(key);
            //newProj.Id = storageProj.Id;
            //newProj.Name = storageProj.Name;
            //newProj.CreationDate = storageProj.CreationDate;
            //newProj.PortfolioId = storageProj.PortfolioId;
            //newProj.Documents = storageProj.Documents;


            //foreach (var doc in newProj.Documents)
            //{
            //    doc.Project = newProj;
            //}
            //projects.Add(newProj);

            if(key == vm.Project.GUID)
            {
                storageProj = await localStorage.GetItemAsync<List<Document>>(key);
            }
        }

        //vm.App.Portfolio.Projects.AddRange(projects);
        //vm.DeleteProjectMenu(vm.Ui.SelectedProject);

        if(vm.Project.SelectedDocument.Content != "")
        {
            await jsRuntime.InvokeVoidAsync("loadContent", objRef, vm.Project.SelectedDocument.Content);
        }

    }

    [JSInvokable]
    public async Task LoadPortfolio()
    {
        //await vm.LoadProyectAsync(token);
        //loaded = true;

        Portfolio storagePortfolio = new Portfolio();

        storagePortfolio = await localStorage.GetItemAsync<Portfolio>("portfolio");

        storagePortfolio.App = vm.App;
        storagePortfolio.AppId = vm.App.Id;


        foreach (var proj in storagePortfolio.Projects)
        {
            proj.Portfolio = PVm.Portfolio;
        }

        PVm.Portfolio = storagePortfolio;

        vm.Project = PVm.Portfolio.Projects.Where(x => x.GUID == token).FirstOrDefault();

        if (vm.Project.SelectedDocument.Content != "")
        {
            await jsRuntime.InvokeVoidAsync("loadContent", objRef, vm.Project.SelectedDocument.Content);
        }


        StateHasChanged();

    }

    [JSInvokable]
    public async Task SaveStorage()
    {
        await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Project.SelectedDocument);





        //foreach (var document in vm.project.Documents)
        //{
        //    if (await localStorage.ContainKeyAsync(document.GUID))
        //    {
        //        Document newDoc = await localStorage.GetItemAsync<Document>(document.GUID);

        //        document.Name = newDoc.Name;
        //        document.Content = newDoc.Content;
        //    }
        //}


        //await vm.SaveContentAsync();
    }

    public async Task NewSave()
    {
        // await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Ui.SelectedDocument);

        List<Project> projects = new List<Project>();
        List<Document> docs = new List<Document>();

        foreach (var project in vm.App.Portfolio.Projects)
        {
            docs.AddRange(project.Documents);
        }

        foreach (var document in docs)
        {
            if (!await localStorage.ContainKeyAsync(document.GUID)) { continue; }

            // if(document.Id == vm.Ui.SelectedDocument.Id)
            {
                //   vm.Ui.SelectedDocument.Name = document.Name;
            }

            Document newDoc = await localStorage.GetItemAsync<Document>(document.GUID);
            document.Name = newDoc.Name;
            document.Content = newDoc.Content;
        }

        await vm.SaveContentAsync();
    }

    public async Task PeriodicSave()
    {
        var timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

        while (await timer.WaitForNextTickAsync())
        {
            await NewSave();
        }
    }

    [JSInvokable]
    public async Task SaveContent(string content, Document doc)
    {
        Document document = vm.Project.Documents.Where(x => x.GUID == doc.GUID).FirstOrDefault();
        document.Content = content;
        await localStorage.SetItemAsync(doc.ProjectId, vm.Project.Documents);
        PVm.UpdateProject(vm.Project);
        vm.Project.SelectedDocument = vm.Project.Documents.Where(x => x.GUID == vm.Project.SelectedDocument.GUID).FirstOrDefault();
    }

    public async Task ChangeContent(Document newDoc)
    {
        await jsRuntime.InvokeAsync<string>("changeContent", objRef, vm.Project.SelectedDocument, newDoc);
    }

    public async Task ChangeProject(Project project)
    {
        //await jsRuntime.InvokeVoidAsync("changeProj", objRef, vm.Ui.SelectedDocument, project.Documents.FirstOrDefault());
    }

    [JSInvokable]
    public async Task SetProjectContent(Document document)
    {
        //Project proj = await localStorage.GetItemAsync<Project>(document.ProjectId);
        //Document newDoc;
        //if (proj == null)
        //    newDoc = null;
        //else
        //    newDoc = proj.Documents.Where(x => x.GUID == document.GUID).FirstOrDefault();

        //var projects = vm.App.Portfolio.Projects.Where(x => x.GUID == document.ProjectId).FirstOrDefault();
        //var oldDoc = projects.Documents.Where(x => x.GUID == document.GUID).FirstOrDefault();

        //if (newDoc != null)
        //{
        //    oldDoc.Content = newDoc.Content;
        //    await jsRuntime.InvokeVoidAsync("loadContent", objRef, newDoc.Content);

        //}
        //else if (document.Content != null)
        //    await jsRuntime.InvokeVoidAsync("loadContent", objRef, document.Content);

        ////vm.SelectProject(projects);
        //StateHasChanged();
    }

    [JSInvokable]
    public async Task SetDocumentContent(Document document)
    {

        var docs = await localStorage.GetItemAsync<List<Document>>(document.ProjectId);
        Document newDoc;
        if (docs == null)
            newDoc = null;
        else
            newDoc = docs.Where(x => x.GUID == document.GUID).FirstOrDefault();

        var oldDoc = vm.Project.Documents.Where(x => x.GUID == document.GUID).FirstOrDefault();

        if (newDoc != null)
        {
            oldDoc.Content = newDoc.Content;
            await jsRuntime.InvokeVoidAsync("loadContent", objRef, newDoc.Content);

        }
        else if (document.Content != null)
            await jsRuntime.InvokeVoidAsync("loadContent", objRef, document.Content);

        vm.Project.SelectedDocument = oldDoc;

         //vm.EventSelectDocumentMenu(oldDoc);

        StateHasChanged();
    }

    [JSInvokable]
    public async Task CallJSSave(Document doc)
    {
        var jsContent = await jsRuntime.InvokeAsync<string>("saveContent", objRef, doc);
    }



    public async Task newDoc()
    {
        await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Project.SelectedDocument);

        vm.NewDocumentMenu(vm.Project);

        await jsRuntime.InvokeAsync<string>("ClearEditor");
    }

    //public async Task NewProj()
    //{
    //    //await jsRuntime.InvokeAsync<string>("saveContent", objRef, vm.Ui.SelectedDocument);

    //    //vm.NewProject();

    //    await jsRuntime.InvokeAsync<string>("ClearEditor");
    //}

    public async Task clipboard(string copied)
    {
        await jsRuntime.InvokeVoidAsync("copyTextToClipboard", copied);
    }

    [JSInvokable]
    public async Task StateChange()
    {
        StateHasChanged();
    }
}
