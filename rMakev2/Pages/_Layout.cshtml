@using Microsoft.AspNetCore.Components.Web
@namespace rMakev2.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using rMakev2.Components

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <!--<link href="rMakev2.styles.css" rel="stylesheet" />-->

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
    <link href="css/open-iconic/font/css/open-iconic-bootstrap.min.css" rel="stylesheet" />
    <link href="css/open-iconic/font/css/open-iconic-bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
    <link href="BlazoredToast2.styles.css" rel="stylesheet" />
    <link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />
    <link href="https://fonts.cdnfonts.com/css/open-sauce-one" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="shortcut icon" type="image/svg" href="/svgs/LOGO RADICAL FONDO BLANCO.svg">  

    <script>

        function focusInput() {
            document.getElementById("PageName").focus();
        }
    </script>
    <script src="js/jquery.min.js"></script>
    <script src="js/popper.js"></script>
    <script src="js/bootstrap.js"></script>
    <script src="js/main.js"></script>

    <script>
        let mode = window.localStorage.getItem('mode'),
            root = document.getElementsByTagName('html')[0];
        if (mode !== null && mode === 'dark') {
            root.classList.add('dark-mode');
        } else {
            root.classList.remove('dark-mode');
        }
    </script>

    <!-- Page loading scripts -->
    <script>
        (function () {
            window.onload = function () {
                const preloader = document.querySelector('.page-loading');
                preloader.classList.remove('active');
                setTimeout(function () {
                    preloader.remove();
                }, 1000);
            };
        })();
    </script>
</head>
<body>


    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="script.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="/editor.js"></script>
    <script src="/tools/headers.js"></script>
    <script src="/tools/cheklist.js"></script>
    <script src="/tools/embed.js"></script>
    <script src="/tools/nestedlist.js"></script>
    <script src="/tools/quotes.js"></script>
    <script src="/tools/simpleimage.js"></script>
    <script src="/tools/marker.js"></script>
    <script src="/tools/codetool.js"></script>
    <script>

        let editor;
        window.runEditor = (dotNetRef, existingData) => {
            console.log(existingData);

            editor = new EditorJS({
                holder: 'editorjs',
                tools: {
                    header: {
                        class: Header,
                        shortcut: 'CMD+SHIFT+H'
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: true,
                        shortcut: 'CMD+SHIFT+O',
                        config: {
                            quotePlaceholder: 'Enter a quote',
                            captionPlaceholder: 'Quote\'s author',
                        }
                    },
                    image: SimpleImage,
                    list: {
                        class: NestedList,
                        inlineToolbar: true,
                        config: {
                            defaultStyle: 'ordered'
                        },
                    },
                    checklist: {
                        class: Checklist,
                        inlineToolbar: true,
                    },
                    linkTool: {
                        class: LinkTool,
                        config: {
                            //endpoint: 'http://localhost:8008/fetchUrl', // Your backend endpoint for url data fetching,
                        }
                    },
                    Marker: {
                        class: Marker,
                        shortcut: 'CMD+SHIFT+M',
                    },
                    code: CodeTool,
                },
                onReady: () => {
                    
                },
                onChange: (api, event) => {
                    console.log(api)
                }
            });
        };

        window.saveContent = (dotNetRef, document) => {
            editor.save()
                .then((savedData) => {
                    const content = JSON.stringify(savedData);
                    dotNetRef.invokeMethodAsync('SaveContent', content, document);
                    console.log(content)

                })
                .catch((error) => {
                    console.error('Saving error', error);
                });
        }

        window.changeContent = (dotNetRef, oldDoc, newDoc) => {
            editor.save()
                .then((savedData) => {
                    const content = JSON.stringify(savedData);
                    dotNetRef.invokeMethodAsync('SaveContent', content, oldDoc);
                    console.log(content)
                })
                .then(() => {
                    dotNetRef.invokeMethodAsync('SetDocumentContent', newDoc);

                })
                .catch((error) => {
                    console.error('Saving error', error);
                });
        }



        window.loadContent = (content) => {
            var draftBody = JSON.parse(content);
            editor.render(draftBody);
        }


    </script>
</body>
</html>
