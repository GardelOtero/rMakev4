@page "/App"
@page "/App/{token}"
@using rMakev2.ViewModel;
@inject RmakeViewModel vm;
@inject IJSRuntime jsRuntime;
@using MudBlazor;
<PageTitle>rMake</PageTitle>
<div class="container-fluid">
    <div class="logo-container">
        <div>
            <p style="font-size:40px; margin: 0;">rMake!</p>
            <p style="font-size:9px; text-align: center;"> V2 </p>

        </div>
        @*<p style="font-size:9px">@vm.Ui.BlockRTAFocus</p>*@
        <div class="header-menu">
            <div class="mt-1 d-flex justify-content-end align-content-center align-items-center" style="height:60px;">
                <select class="server-select form-select align-items-center" style="width:-webkit-fit-content; float: left; border:thin; border-style:solid;">
                    <option value="1" selected="selected" style="color:#000">Data: @vm.App.Id</option>
                    <option value="1" style="color:#000">---</option>
                    <option value="2" style="color:crimson;">Cerrar</option>
                </select>
                <div style="float:left; width:10%;">
                    <a class="textMenu Underline" style="float:right">Merge</a>
                </div>
                <div style="float:left; width:10%">
                    <a class="textMenu Underline" style="float:right" @onclick="vm.ForkProject">Fork project</a>
                </div>
                <div style="float:left; width:12%">
                    <a class="textMenu Underline" style="float:right" @onclick="vm.CloneDocument">Clone document</a>
                </div>
                <div class="nav-bar-icons" style=" width:10%;">
                    <a class="Underline" @onclick=" vm.ShowSaveModal"><img class="md-icons" src="svgs/Guardar.svg" /> </a>
                    <a class="Underline" @onclick=" vm.ShowAreaComment"><img class="md-icons" src="svgs/Coments.svg" /> </a>
                    <a class="Underline" @onclick=" vm.ShowPublishModal"><img class="md-icons" src="svgs/Publish.svg" /> </a>
                </div>
            </div>
        </div>
    </div>
    <div class="Elements" style="padding-top: 162px;">
        <div class="item1" style="position:fixed">
            <div class="projectName d-flex justify-content-start align-items-center"
                 style="width: 250px; padding-bottom: 10px;">
                <div class="d-flex align-items-center">
                    <button @onclick="vm.DisplayMenu" class="display-menu"><img class="m-icons" src="svgs/Menu bar.svg" /> </button>

                    @if (@vm.Ui.EditProjectName == false)
                    {
                        <span sytle="font-size: 18px;">@vm.Ui.SelectedProject.Name</span>
                        @if (vm.Ui.SelectedProject.ParentProjectId == null)
                        {
                            // <div class="badge bg-secondary">Root project</div>
                        }
                        else
                        {
                            // <div class="badge bg-secondary">@vm.Ui.SelectedProject.ParentProjectId</div>

                        }
                    }
                    else
                    {
                        <input Id="ProjectName" @bind="@vm.Ui.SelectedProject.Name"
                           @onblur="vm.UnBlockRTAFocus"
                           @onkeydown="@vm.Enter"
                           @bind:event="oninput"
                           class="form-control-plaintext small"
                           style=" font-size:18px; padding-left: 5px;"
                           placeholder="Project Name" autofocus @onclick="vm.BlockRTAFocus" />

                    }

                    <button @onclick="vm.SwitchProjectName" class="btn btn-light rounded-circle hide-edit-icon"><Icon Name="IconName.Edit" IconSize="IconSize.Small" /> </button>
                </div>
            </div>
            @if (vm.Ui.DisplayMenu == true)
            {
                @*Clase para el menu de la izquierda*@
                <div class="sidebar close">
                    <div class="projects-container">
                        <ul class="nav-links d-flex align-items-center">
                            <MudPaper Width="auto">
                                <MudList Clickable="true" @bind-SelectedItem="selectedItem" @bind-SelectedValue="selectedValue">
                                    @foreach (var item in vm.App.Data.Projects)
                                    {

                                        <MudListItem Style="font-weight: 500;" Text="@item.Name" Value="@item.Id">

                                            <NestedList>
                                                @foreach (var item1 in item.Documents)
                                                {


                                                    @if (item1.Name == "")
                                                    {
                                                        <div class="hide-test" style="padding-left: 20px">
                                                            <MudListItem Style="font-size: 14px; opacity: 0.4;" Text="@item1.Name" Value="@item1.Id" @onclick="@(() => vm.EventSelectDocumentMenu(item1))">
                                                                Titulo (@item1.Order)
                                                                <MudIconButton @onclick="() => vm.DeleteDocumentMenu(item1)">
                                                                    <img class="hide-delete-icon" src="css/iconsRmake/Asset 4.svg" style="height: 15px; width:15px; float:right;" />
                                                                </MudIconButton>
                                                            </MudListItem>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <MudListItem Text="@item1.Name" Value="@item1.Id" @onclick="@(() => vm.EventSelectDocumentMenu(item1))">
                                                            @item1.Name
                                                            <MudIconButton Style="opacity: 0.2;" @onclick="() => vm.DeleteDocumentMenu(item1)">
                                                                <img src="css/iconsRmake/Asset 4.svg" style="height: 15px; width:15px; float:right" />
                                                            </MudIconButton>
                                                        </MudListItem>
                                                    }






                                                }

                                                <MudIconButton Style="opacity: 0.3;" @onclick="() => vm.NewDocumentMenu(item)"><Icon Name="IconName.Add" IconSize="IconSize.ExtraSmall" /> </MudIconButton>
                                                <MudDivider Style="opacity: 0.1 width: auto;" />
                                            </NestedList>
                                            <ChildContent>
                                                @item.Name
                                                <MudIconButton Style="opacity: 0.3" @onclick="()=>vm.DeleteProjectMenu(item)"><div class="delete-icon-menu-left"><img src="css/iconsRmake/Asset 4.svg" style="height: 15px; width:15px; float:right" /> </div></MudIconButton>
                                            </ChildContent>
                                        </MudListItem>



                                    }
                                </MudList>



                            </MudPaper>


                        </ul>
                    </div>
                    <div class="d-flex justify-content-center" style="position: fixed; width: auto;">
                        <div style="width: auto;">
                            <button @onclick="vm.NewProject" class="btn btn-light new-project-btn">New Project</button>
                        </div>
                    </div>
                </div>


            }
        </div>
        <div class="item2" style="z-index: 2;">
            @*Clase para los elements de la derecha*@
            <div class="mt-4">
                <div class="row">
                    <div class="col-2">
                    </div>
                    <div class="col-10 m-derecha">
                        <input @bind="@vm.Ui.SelectedDocument.Name"
                               @bind:event="oninput" id="PageName" autofocus="true"
                               @onblur="vm.UnBlockRTAFocus"
                               @onclick="vm.BlockRTAFocus"
                               class="form-control-plaintext small"
                               style="color: #342e37; font-size:50px"
                               placeholder="Write your title here" />
                        <div style="position:relative;">
                            @if (vm.Ui.SelectedDocument.ParentDocumentId == null)
                            {
                                <div class="badge bg-success float-start" style="float:left; width:auto">Root Document</div>
                            }
                            else
                            {
                                <div class="badge bg-success" style="float:left; width:auto">@vm.Ui.SelectedDocument.ParentDocumentId</div>
                            }
                        </div>
                        <div class="clearfix"></div>

                    </div>
                </div>
                <div class="row">
                    @foreach (var item in vm.Ui.SelectedDocument.Elements.OrderBy(w => w.Order))
                    {
                        <div class="col-2 hide">
                            <button @onclick="()=>vm.DeleteElement(item)"
                                class="btn btn-light btn-sm elements-icons">
                                <img class="sm-icons" src="svgs/Delete.svg" />
                            </button>
                            <button @onclick="()=>vm.MoveDown(item)"
                                class="btn btn-light btn-sm elements-icons">
                                <img class="sm-icons" src="svgs/Arrow down.svg" />
                            </button>
                            <button @onclick="()=>vm.MoveUp(item)"
                                class="btn btn-light btn-sm elements-icons">
                                <img class="sm-icons" src="svgs/Arrow up.svg" />
                            </button>
                            <button class="btn btn-light btn-sm elements-icons">
                                <img class="sm-icons" src="svgs/Idea.svg" />
                            </button>



                        </div>
                        <div class="col-10 myDiv hide-test">

                            <rMakev2.Components.TextAreaComponent @bind-BindingValue=@item.Content OrderId=@item.Order />
                            <span class="badge bg-primary small">
                                Hash: @item.Hash
                            </span>
                        </div>


                    }
                    <div class="col-2">
                    </div>
                    <div class="col-10 d-flex mt-5">
                        <button @onclick="vm.NewElement"
                                class="btn btn-light btn-sm"
                                style="opacity: 0.5; border-radius: 50%;">
                            <Icon Name="IconName.Add" IconSize="IconSize.x2" />
                        </button>
                    </div>

                </div>
            </div>

        </div>
        <div class="item3">
            @if (vm.Ui.DisplayComents)
            {
                <div class="col-2" style="max-width:fit-content;">
                    <div class="comments-container">
                        <textarea placeholder="Comments Area:"></textarea>
                    </div>
                </div>

            }
        </div>
    </div>

</div>


@*<div class="row">
    <div class="col-12">
    <textarea style="background-color:black; color:lawngreen; width:500px; height:900px;">
    @vm.Ui.Json
    </textarea>
    </div>

    </div>*@
@*    <div class="projectName d-flex justify-content-start align-items-center" style="width: fit-content;">
        <div style="postion:fixed">
        <button @onclick="vm.DisplayMenu" style="border:none; background:transparent; opacity: 0.3;"><Icon Name="IconName.Bars" IconSize="IconSize.Large" /> </button>

        @if (@vm.Ui.EditProjectName == false)
        {
        <span sytle="font-size: 18px;">@vm.Ui.SelectedProject.Name</span>
        @if (vm.Ui.SelectedProject.ParentProjectId == null)
        {
        // <div class="badge bg-secondary">Root project</div>
        }
        else
        {
        // <div class="badge bg-secondary">@vm.Ui.SelectedProject.ParentProjectId</div>

        }
        }
        else
        {
        <input Id="ProjectName" @bind="@vm.Ui.SelectedProject.Name" @onblur="vm.UnBlockRTAFocus" @onkeydown="@vm.Enter" @bind:event="oninput" class="form-control-plaintext small" style=" font-size:18px; " placeholder="Project Name" autofocus @onclick="vm.BlockRTAFocus" />

        }

        <button @onclick="vm.SwitchProjectName" class="btn btn-light rounded-circle hide-edit-icon" style="background-color: transparent; border-color: transparent;"><Icon Name="IconName.Edit" IconSize="IconSize.Small" /> </button>
        </div>
    </div>*@

@*<div class=" fixed-bottom mb-1">
    <div class=" container">
        <div class=" row">
            <div class=" col-12">
                <button @onclick=" vm.ShowSaveModal" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>
                <button @onclick=" vm.ShowPublishModal" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Publish</button>
                <button @onclick=" vm.ForkProject" class="btn btn-success"><Icon Name="IconName.Archive" /> Fork Project</button>
                <button @onclick=" vm.CloneDocument" class="btn btn-success"><Icon Name="IconName.Archive" /> Clone document</button>



            </div>
        </div>
    </div>
</div>*@



<Modal @ref="vm.App.Ui.SaveModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose your server</h2>
                    <p>Save your token to retrive your content</p>
                    <h5> @vm.App.Data.Id</h5>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            rMake@Rebel-server
                        </label>
                    </div>


                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="vm.App.Ui.PublishModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HidePublishModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Where do you want to publish your content</h2>
                    <p>rMake is a decentralized solution for creators.</p>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                        <label class="form-check-label" for="flexCheckDefault">
                            www.xipegroup.com
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalcompanies.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalpurpose.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.anotherwebsite.org
                        </label>
                    </div>
                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="vm.App.Ui.MergeModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose Documents to Merge</h2>
                    <p>How it works...</p>


                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>

@code
{

    bool _isExpanded = true;
    MudListItem selectedItem;
    object selectedValue = 1;

    [Parameter]
    public string token { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (token != "")
                await vm.LoadProyectAsync(token);
        }
        catch
        {

        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (vm.Ui.EditProjectName == true && vm.Ui.EditedProjectName == false)
        {
            await jsRuntime.InvokeVoidAsync("focusInput");
            vm.Ui.EditedProjectName = true;
        }
        else if (vm.Ui.EditProjectName == false && vm.Ui.EditedProjectName == true)
        {
            vm.Ui.EditedProjectName = false;
        }

    }

    public async Task Focus()
    {
        vm.SwitchProjectName();

    }

}
