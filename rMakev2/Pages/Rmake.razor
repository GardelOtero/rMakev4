@page "/App"
@using rMakev2.ViewModel;
@inject RmakeViewModel vm;
@inject IJSRuntime jsRuntime;
<PageTitle>rMake</PageTitle>
<div class="container">
    <div class="row mt-1" style="height:50px;">
        <div class="col-lg-3 col-md-5 col-sm-12">
            <h1>rMake!</h1>
            <p style="font-size:9px">V 2</p>
            <p style="font-size:9px">@vm.Ui.BlockRTAFocus</p>
        </div>
        <div class="col-lg-5 col-md-2 col-sm-12">
        </div>
        <div class="col-lg-4 col-md-2 col-sm-12">
            <select class="form-select " style="border:none; text-align:right; color:hotpink">
                <option value="1" selected="selected" style="color:#000">Data: @vm.App.DataToken</option>
                <option value="1" style="color:#000">---</option>
                <option value="2" style="color:crimson;">Cerrar</option>
            </select>
        </div>

    </div>

    <div class="row mt-4 mb-4" style="height:90px;">
        <div class="col-lg-2 col-md-5 col-sm-12">
        </div>
        <div class="col-lg-4 col-md-2 col-sm-12">
        </div>
        <div class="col-lg-3 col-md-5 col-sm-12">
            <div style="float:left; width:70%">

                @if (@vm.Ui.EditProjectName == false)
                {
                    <select @onchange="vm.EventSelectProject" class="form-select " style="border:none;">
                        @foreach (var item in vm.App.Data.Projects)
                        {
                            if (item == vm.Ui.SelectedProject)
                            {
                                if (item.Name == "")
                                {
                                    <option value="@item.Id" selected="selected">Project (@item.Id)</option>
                                }
                                else
                                {

                                    <option value="@item.Id" selected="selected">@item.Name</option>
                                }
                            }
                            else
                            {
                                if (item.Name == "")
                                {
                                    <option value="@item.Id">Project (@item.Id)</option>
                                }
                                else
                                {

                                    <option value="@item.Id">@item.Name</option>
                                }
                            }
                        }
                    </select>
                    @if (vm.Ui.SelectedProject.ParentProjectId == null)
                    {
                        <div class="badge bg-secondary">Root project</div>
                    }
                    else
                    {
                        <div class="badge bg-secondary">@vm.Ui.SelectedProject.ParentProjectId</div>

                    }
                }
                else
                {
                    <input Id="ProjectName" @bind="@vm.Ui.SelectedProject.Name" @onblur="Focus" @onkeydown="@vm.Enter" @bind:event="oninput" class="form-control-plaintext small" style=" font-size:24px; " placeholder="Project Name" autofocus @onload="Focus" />

                }



            </div>
            <div style="float:left; width:15%">

                <button @onclick="vm.SwitchProjectName" class="btn btn-light rounded-circle"><Icon Name="IconName.Edit" /> </button>


            </div>
            <div style="float:left; width:15%">

                <button @onclick="vm.NewProject" class="btn btn-light rounded-circle"><Icon Name="IconName.Add" /> </button>


            </div>
        </div>
        <div class="col-lg-3 col-md-2 col-sm-12">
            <div style="float:left; width:70%">
                <select @onchange="vm.EventSelectDocument" class="form-select" style="border:none;">
                    @foreach (var item in vm.Ui.SelectedProject.Documents)
                    {
                        if (item == vm.Ui.SelectedDocument)
                        {
                            if (item.Name == "")
                            {
                                <option value="@item.Id" selected="selected">Title (@item.Order)</option>
                            }
                            else
                            {

                                <option value="@item.Id" selected="selected">@item.Name</option>
                            }
                        }
                        else
                        {
                            if (item.Name == "")
                            {
                                <option value="@item.Id">Title (@item.Order)</option>
                            }
                            else
                            {

                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    }
                    <option value="">Add new document</option>
                </select>
            </div>

            <div style="float:left; width:30%">

                <button @onclick="vm.NewDocument" class="btn btn-light rounded-circle"><Icon Name="IconName.Add" /> </button>

            </div>
        </div>
    </div>


    <div class="row mt-4">
        <div class="col-lg-12 col-md-2 col-sm-12">
            <input @bind="@vm.Ui.SelectedDocument.Name" @bind:event="oninput" id="PageName" autofocus="true" class="form-control-plaintext small" style=" font-size:28px; " placeholder="Title" />
            <div style="position:relative;">
                @if (vm.Ui.SelectedDocument.ParentDocumentId == null)
                {
                    <div class="badge bg-success float-start">Root Document</div>
                }
                else
                {
                    <div class="badge bg-success">@vm.Ui.SelectedDocument.ParentDocumentId</div>
                }
            </div>
            <div class="clearfix"></div>

            <div class="mt-2">
                @foreach (var item in vm.Ui.SelectedDocument.Elements.OrderBy(w => w.Order))
                {
                    <div style="float:left; width:80%">
                        <rMakev2.Components.TextAreaComponent @bind-BindingValue=item.Content OrderId=item.Order />
                        <span class="badge bg-primary small">
                            Hash: @item.Hash
                        </span>
                    </div>
                    <div style="float:left; width:20%">
                        <button @onclick="()=>vm.DeleteElement(item)" class="btn btn-light btn-sm"><Icon Name="IconName.Delete" /></button>
                        <button @onclick="()=>vm.MoveUp(item)" class="btn btn-light btn-sm"><Icon Name="IconName.ArrowUp" /></button>
                        <button @onclick="()=>vm.MoveDown(item)" class="btn btn-light btn-sm"><Icon Name="IconName.ArrowDown" /></button>
                    </div>
                }
                <br />
            </div>

        </div>
        <br />

    </div>
    <div class="col-12 text-start">

        <button @onclick="vm.NewElement" class="btn btn-light btn-sm mt-3">New Element</button>
    </div>

</div>

<div class=" fixed-bottom mb-1">
    <div class=" container">
        <div class=" row">
            <div class=" col-12">
                <button @onclick=" vm.ShowSaveModal" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>
                <button @onclick=" vm.ShowPublishModal" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Publish</button>
                <button @onclick=" vm.ForkProject" class="btn btn-success"><Icon Name="IconName.Archive" /> Fork Project</button>
                <button @onclick=" vm.CloneDocument" class="btn btn-success"><Icon Name="IconName.Archive" /> Clone document</button>
             

            </div>
        </div>
    </div>
</div>

<Modal @ref="vm.App.Ui.SaveModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose your server</h2>
                    <p>rMake is a decentralized solution for creators.</p>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            rMake@Rebel-server
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" checked>
                        <label class="form-check-label" for="flexCheckChecked">
                            rmake@Radical-server
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" checked>
                        <label class="form-check-label" for="flexCheckChecked">
                            rmake@Other-server
                        </label>
                    </div>
                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
<Modal @ref="vm.App.Ui.PublishModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Where do you want to publish your content</h2>
                    <p>rMake is a decentralized solution for creators.</p>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault" checked>
                        <label class="form-check-label" for="flexCheckDefault">
                            www.xipegroup.com
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalcompanies.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.radicalpurpose.org
                        </label>
                    </div>
                    <div class="form-check p-3">
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked">
                        <label class="form-check-label" for="flexCheckChecked">
                            www.anotherwebsite.org
                        </label>
                    </div>
                    <button @onclick=" vm.SaveContentAsync" class="btn btn-success"><Icon Name="IconName.Lightbulb" /> Save</button>

                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
<Modal @ref="vm.App.Ui.MergeModal" class="half-modal fade">
    <ModalContent Centered="true">
        <ModalBody>
            <div class="close-button" @onclick="vm.HideSaveModal">
                <Icon Name="IconName.Times"></Icon>
            </div>
            <div class="h-100 p-4">
                <div class="w-100 h-50">
                    <h2>Choose Documents to Merge</h2>
                    <p>How it works...</p>


                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
@code
{


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (vm.Ui.EditProjectName == true && vm.Ui.EditedProjectName == false)
        {
            await jsRuntime.InvokeVoidAsync("focusInput");
            vm.Ui.EditedProjectName = true;
        }
        //if (vm.Ui.NewElement == true)
        //{
        //    string elementId = vm.Ui.SelectedDocument.Elements.OrderBy(w => w.Order).Last().Order.ToString();
        //    await jsRuntime.InvokeVoidAsync("focusLastTextEditor", elementId);
        //    vm.Ui.NewElement = false;
        //}

    }
    
    public async Task Focus()
    {
        vm.SwitchProjectName();

    }
}
